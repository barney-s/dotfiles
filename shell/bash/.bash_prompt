#!/usr/bin/env bash
# Bash prompt by barney-s
# https://github.com/barney-s/dotfiles
# 
# -- attribution ---------------------------------------------------------------
#
# github sources: twolfson/sexy-bash-prompt, ronakg/dotfiles
# http://www.thegeekstuff.com/2008/09/bash-shell-take-control-of-ps1-ps2-ps3-ps4-and-prompt_command
# https://github.com/undu/bash-powerline
# http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/clockt.html
# http://tldp.org/HOWTO/Bash-Prompt-HOWTO/bash-prompt-escape-sequences.html
# http://askubuntu.com/questions/17723/trim-the-terminal-command-prompt-working-directory
#
# -- quick reference -----------------------------------------------------------
#
# \a  an ASCII bell character (07)
# \d  the date  in  "Weekday  Month  Date"  format (e.g., "Tue May 26")
# \e  an ASCII escape character (033)
# \h  the hostname up to the first `.'
# \H  the hostname
# \j  the  number of jobs currently managed by the shell
# \l  the basename of the shell's terminal  device name
# \n  newline
# \r  carriage return
# \s  the  name  of  the shell, the basename of $0 (the portion following the final slash)
# \t  the current time in 24-hour HH:MM:SS format
# \T  the current time in 12-hour HH:MM:SS format
# \@  the current time in 12-hour am/pm format
# \u  the username of the current user
# \v  the version of bash (e.g., 2.00)
# \V  the release of bash,  version+patchlevel (e.g., 2.00.0)
# \w  the current working directory
# \W  the  basename  of the current working directory
# \!  the history number of this command
# \#  the command number of this command
# \$  if the effective UID is 0, a #, otherwise  a $
# \nnn  the  character  corresponding  to  the octal number nnn
# \\  a backslash
# \[  begin a sequence of non-printing characters,
#     which could be used to embed a terminal control sequence into the prompt
# \]  end a sequence of non-printing characters
#
# -- unicode characters --------------------------------------------------------
#
# • ▶ → ⚡ * △ ▲ ▽ ▼ ⬡ ⬢
#

# -- palettes function ---------------------------------------------------------
palette_dump() {
  per_line=8
  count=1

  if tput setaf 1 &> /dev/null; then
    for i in $(seq 0 $(tput colors)); do
      echo -n " $(tput setaf $i)$i$(tput sgr0) $(tput bold)$(tput setaf $i)$i$(tput sgr0) $(tput sgr 0 1)$(tput setaf $i)$i$(tput sgr0)"
      count=$((count+1))
      if [ $count -gt $per_line ]; then
         echo
         count=1
      fi
    done
  else
    for i in $(seq 0 109); do
      echo -n -e "\033[1;${i}mText$(tput sgr0) "
      echo "\033[1;${i}m"
    done
  fi
  echo
}


palette_print() {
  echo "$(tput setaf $1)$(tput setab $2)$3$(tput sgr0)"
}



__setup_bash_prompt() {
  readonly BLOCK_START=''
  readonly MAX_PATH_LENGTH=30
  if tput setaf 1 &> /dev/null; then
     tput sgr0 &> /dev/null
     readonly PROMPT_COLORS="256"
  else
     readonly PROMPT_COLORS="ANSI"
  fi

  # -- colors definition ---------------------------------------------------------
  _color() {
    if [[ ! -z "$1" ]]; then
      if [[ "$PROMPT_COLORS" == "256" ]]; then
         echo -n "\[$(tput setaf "$1")\]"
      else
         echo "\033[1;$1m"
      fi
    fi
    if [[ ! -z "$2" ]]; then
      if [[ "$PROMPT_COLORS" == "256" ]]; then
         echo -n "\[$(tput setab "$2")\]"
      else
         echo "\033[1;$2m"
      fi
    fi
  }
 
  # If we are on a colored terminal
  if [[ "$PROMPT_COLORS" == "256" ]]; then
    # Save common color actions
    readonly bold="\[$(tput bold)\]"
    readonly reset="\[$(tput sgr0)\]"
    readonly normal="\[$(tput bold)\]"
  else
    readonly bold=""
    readonly reset="\033[m"
    readonly blue="\033[1;34m"
    readonly white="\033[1;37m"
    readonly cyan="\033[1;36m"
    readonly purple="\033[1;36m"
    readonly green="\033[1;32m"
    readonly yellow="\033[1;33m"
    readonly red="\033[1;31m"
    readonly gray="\033[1;31m"
    readonly normal=""
  fi
  
  # -- prompt helper -------------------------------------------------------------

  _prompt() {
    # fg, bg, text 
    local block
    if [ ! -z "$lastbg" ]; then
      block+="$(_color "$lastbg" "$2")"
      block+="$BLOCK_START "
    fi
    block+="$(_color "$1" "$2")"
    block+="$3"
    _section="$block"
    lastbg=$2
  }

  # superuser or not, here I go!
  _user() {
    local user=$(whoami)
    local host=$(hostname)
    alternateuser=$(cat ~/.bash_ps_alternate | grep -w $user | cut -f2 -d\ )
    alternatehost=$(cat ~/.bash_ps_alternate | grep "$host" | cut -f2 -d\ )
    
    if [[ "$alternateuser" != "" ]]; then
       user=$alternateuser
    fi
    if [[ "$alternatehost" != "" ]]; then
       host=$alternatehost
    fi
 
    if [[ "$PROMPT_SIZE" != "wide" ]]; then
      user="${user:0:4}"
      local host=$(hostname)
      host="${host:-6}"
    fi
 
    if [ -z "$(id -u "$USER")" ]; then
      c=9
    else
      c=25
    fi
    _prompt $c 15 "$user|$host"
  }


  # -- git helper functions ------------------------------------------------------
  function _git_branch() {
    
    local branch
    ref="$(git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///')"
    if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
      if [[ "$branch" == "HEAD" ]]; then
         branch='detached'
      fi
      echo "$branch"
    else
      echo ""
    fi
  }
  
  function _git_dirty() {
    if [[ -n "$(git status --porcelain 2> /dev/null)" ]]; then
      echo 1
    fi
  }
  
  function _git_status() {
    dirty_branch="$(_git_dirty)"
    #  • ▶ → ⚡ * △ ▲ ▽ ▼ ⬡ ⬢
    if [[ "$dirty_branch" == 1 ]]; then
      echo "${red}•${reset}"
    else # clean
      echo "${green}•${reset}"
    fi
  }
  
  _git_info () {
    _section=''
    branch="$(_git_branch)"
    if [[ "$branch" != "" ]]; then
      dirty_branch="$(_git_dirty)"
      if [[ "$dirty_branch" == 1 ]]; then
         c=217
      else 
         c=150
      fi
      _prompt 234 $c " $branch"
    fi
  }

  # -- conda info ----------------------------------------------------------------
  _conda_info () {
    _section=''
    if [[ "$CONDA_DEFAULT_ENV" != "" ]]; then
      _prompt 238 223 "$CONDA_DEFAULT_ENV"
    fi
  }
  
  # -- pwd helper functions ------------------------------------------------------
  
  function _pwd_info() {
    _section=''
    local dir=""
    if [ $(pwd | grep -o '/' | wc -l) -gt 3 ]; then
      dir=$(pwd | sed -e "s@$HOME@~@" | sed -E "s@([^/])[^/]+/@\1/@g")
    else
      dir=$(pwd)
    fi
    if [[ "$PROMPT_SIZE" != "wide" ]]; then
      _prompt 239 152 "$dir"
    else 
      _prompt 239 152 "\w"
    fi
  }
  
  function _end_block() {
    local end="\n${bold}→ ${reset}"
    if [[ "$PROMPT_SIZE" != "wide" ]]; then
      end=""
    fi
    _prompt 4 "" "$end"
    _section="${reset}$_section"
  }

  # -- PS1 prompt function -------------------------------------------------------
  
  function _prompt_wide
  {
    lastbg=''
    PS1=''
    _user && PS1+=$_section
    _pwd_info && PS1+=$_section
    _git_info && PS1+=$_section
    _conda_info && PS1+=$_section
    _end_block && PS1+=$_section
    PS1+="${reset}"
  }
  
  function _prompt_short
  {
    local hostlen=6
    local userlen=4
    local sep="${gray}\[|\]${reset}"
    local endchar="${blue}▶ ${reset}"
    local user=$(whoami)
    local user="${blue}${user:0:$userlen}${sep}"
    local host=$(hostname)
    local host="${cyan}${host: -$hostlen}${sep}"
    local gitinfo="${purple}$(_git_info)${sep}"
    local dirinfo="${blue}$(_pwd)${sep}"
    PS1="${user}${host}${dirinfo}${gitinfo}${endchar}"
  }
  
  
  # -- seting prompts ------------------------------------------------------------
  if [[ "$PROMPT_SIZE" == "wide" ]]; then
    export PS2="${blue}... ${reset}"
    export PS3="$(tput setaf 12)(select): $(tput sgr0)"
    export PS4="$(tput setaf 3)\t|\u|$0|\$LINENO++ $(tput sgr0)"
    PROMPT_COMMAND=_prompt_wide
  else
    export PS2="${blue}> ${reset}"
    export PS3="$(tput setaf 12)#? $(tput sgr0)"
    export PS4="$(tput setaf 3)\t|\$LINENO+ $(tput sgr0)"
    PROMPT_COMMAND=_prompt_short
  fi

}

__setup_bash_prompt
unset __setup_bash_prompt
