[user]                                                                                                                                                                                                                                        
  email = barni@google.com                                                                                                                                                                                                              
  name = Barni S

[github]
  user = barney-s

[alias]
  abbrev = !sh -c 'git rev-parse --short ${1-`echo HEAD`}' -
  ack = grep --break --heading
  both = diff HEAD
  br = branch
  ci = commit -v
  co = checkout
  count = !sh -c 'git log --oneline | wc -l'

  # http://stackoverflow.com/questions/224687/git-find-duplicate-blobs-files-in-this-tree/8408640#8408640
  dupes = !"git ls-tree -r HEAD | cut -c 13- | sort | uniq -D -w 40"
  fixup = !sh -c 'git commit --fixup=$1 ${@:2}' -

  # requires Git 1.6.3 or later; %C(auto) requires Git 1.8.3 or later

  ama = commit -a --amend -v --no-edit
  # Amend the currently staged files to the latest commit
  # amend = commit --amend --reuse-message=HEAD
  reword = commit --amend --only -v --

  graph = log --graph --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)<%aN>%Creset'
  one = log --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)<%aN>%Creset'

  # requires Git 1.5.4 or later
  p = add -p
  patch = add -p

  # requires Git 1.7.11.3 or later

  # requires Git 1.6.2 or later
  rollback = !sh -c 'git reset --merge HEAD~${1-1}' -

  # "smartlog", although it's not that smart.
  # Equivalent to `git graph --all --simplify-by-decoration.
  sl = log --graph --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)<%aN>%Creset' --all --simplify-by-decoration

  s = status -s
  st = status
  staged = diff --cached

  # %C(auto) requires Git 1.8.3 or later
  ten = log -10 --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %C(magenta bold)(%cr)%Creset %C(cyan)<%aN>%Creset'

  qm = "git ack checkout vi; git merge @{-1}"
  cma = commit --all --message

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v


  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch
  mpr = "!f() { \
  declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
  declare branch=\"${2:-$currentBranch}\"; \
  if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
     git fetch origin refs/pull/$1/head:pr/$1 && \
     git checkout -B $branch && \
     git rebase $branch pr/$1 && \
     git checkout -B $branch && \
     git merge pr/$1 && \
     git branch -D pr/$1 && \
     git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
  fi \
  }; f"



[branch]
  autosetupmerge = always
  autosetuprebase = local

[branch "master"]
  rebase = true

[color]
  ui = auto
  branch = auto
  diff = auto
  status = auto
  grep = auto

#[color "branch"]
#  current = yellow reverse
#  local = yellow
#  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = green
  changed = yellow
  untracked = cyan

[color "diff-highlight"]
  oldHighlight = red bold 238
  newHighlight = green bold 238

[color "interactive"]
  prompt = blue reverse

[core]
  #pager = sh -c "~/.dotfiles/bin/diff-highlight | less -iFMRSX" -
  pager = less -iFMRSX

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

# ignored by Git older than 1.8.2
[diff]
  algorithm = histogram
  tool = vimdiff
  # Detect copies as well as renames
  renames = copies
  # Added in Git 2.9.0 (experimental): more readable diffs.
  compactionHeuristic = true

[difftool]
  #todo chcek
  prompt = true

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[grep]
  lineNumber = true
  # requires Git built with PCRE support; ie:
  #   brew install git --with-pcre (on OS X)
  #   patternType = perl

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 5

## todo install diff-highlight
#[interactive]
#  diffFilter = diff-highlight

[log]
  date = relative
  decorate = short

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  tool = vimdiff

#[mergetool "vimdiff"]
#  path = nvim

[pager]
  show-branch = true
  status = true

[push]
  # Added in Git 1.7.11, default in 2.0, but still required (to avoid warning).
  default = simple

  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  #default = matching
  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[rebase]
  autosquash = true

[rerere]
  enabled = true

[status]
  submodulesummary = true

[submodule]
  fetchJobs = 4

[credential]
  helper = osxkeychain

# ignored by Git older than 1.7.10
[include]
  path = .gitconfig.local

#[filter "lfs"]
#  clean = git-lfs clean %f
#  smudge = git-lfs smudge %f
#  required = true

[show]
   tool = vimdiff

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
   insteadOf = "gist:"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

#[commit]
#  # https://help.github.com/articles/signing-commits-using-gpg/
#  gpgsign = true


